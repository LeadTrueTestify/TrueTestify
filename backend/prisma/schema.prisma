datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model for authentication
model User {
  id         String        @id @default(uuid())
  email      String        @unique
  password   String        // Hashed with bcrypt
  name       String?       // Optional user name (can be added later)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  BusinessUser BusinessUser[]

  // Indexes and unique constraints per naming conventions
  @@index([email], name: "ix_users_email")
  @@unique([email], map: "uq_users_email")
}

// Business model (tenants)
model Business {
  id           String        @id @default(uuid())
  slug         String        @unique
  name         String
  logoUrl      String?       // S3 URL for logo
  brandColor   String?       // e.g., hex code
  website      String?
  contactEmail String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  BusinessUser BusinessUser[]

  // Indexes and unique constraints per naming conventions
  @@index([slug], name: "ix_businesses_slug")
  @@unique([slug], map: "uq_businesses_slug")
  // Composite index for safety as per multi-tenant rules
  @@index([id], name: "ix_businesses_id") // Basic ID index if needed
}

// Join table for user-business associations (allows multiple users per business, roles for owners/staff)
model BusinessUser {
  id         String        @id @default(uuid())
  businessId String
  userId     String
  role       String        @default("owner") // e.g., 'owner', 'staff'
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  business   Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes and unique constraints per naming conventions
  @@unique([businessId, userId], name: "uq_business_users_business_id_user_id")
  @@index([businessId], name: "ix_business_users_business_id")
  @@index([userId], name: "ix_business_users_user_id")
  @@index([businessId, role], name: "ix_business_users_business_id_role")
}

// Note: Prisma does not support custom naming for foreign key constraints directly (e.g., fk_business_users_businesses).
// This is a Prisma limitation. The generated FK names will be like "BusinessUser_businessId_fkey".
// If exact FK naming is required, use raw SQL in migrations or post-migration scripts.
// For this MVP, we proceed with Prisma's defaults as they are functional and follow best practices.