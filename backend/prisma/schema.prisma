datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [citext]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model Business {
  id            String       @id @default(uuid())
  slug          String       @unique @db.Citext
  name          String
  logoUrl       String?
  brandColor    String?
  website       String?
  contactEmail  String?      @db.Citext
  settingsJson  Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  reviews       Review[]
  mediaAssets   MediaAsset[]
  businessUsers BusinessUser[]
  transcodeJobs TranscodeJob[]
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique @db.Citext
  passwordHash  String
  name          String?
  status        String       @default("active")
  lastLoginAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  businessUsers BusinessUser[]
}

model BusinessUser {
  id         String    @id @default(uuid())
  businessId String
  userId     String
  role       String    @default("owner")
  isDefault  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  business   Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([businessId, userId])
  @@index([businessId])
  @@index([userId])
  @@index([businessId, userId])
}

model Review {
  id                  String      @id @default(uuid())
  businessId          String
  type                String
  status              String      @default("pending") // pending, approved, rejected
  title               String?
  bodyText            String?
  rating              Int?
  reviewerName        String?
  reviewerContactJson Json?
  consentChecked      Boolean     @default(false)
  source              String?     @default("website")
  submittedAt         DateTime?
  publishedAt         DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  deletedAt           DateTime?
  business            Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  mediaAssets         MediaAsset[]
  transcodeJobs       TranscodeJob[]

  @@index([businessId, status], name: "ix_reviews_business_id_status")
  @@index([businessId, submittedAt], name: "ix_reviews_business_id_submitted_at")
  @@index([businessId])
}

model MediaAsset {
  id           String        @id @default(uuid())
  businessId   String
  reviewId     String
  assetType    String
  s3Key        String
  durationSec  Int?
  sizeBytes    Int
  metadataJson Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  business     Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  review       Review        @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  transcodeJobs TranscodeJob[] @relation("MediaAssetToTranscodeJob")

  @@index([businessId, reviewId], name: "ix_media_assets_business_id_review_id")
  @@index([businessId])
}

model TranscodeJob {
  id            String      @id @default(uuid())
  businessId    String
  reviewId      String
  inputAssetId  String
  target        String      // e.g., '720p', 'audio_mp3'
  status        String      @default("pending") // pending, processing, completed, failed
  error         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  business      Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  review        Review      @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  inputAsset    MediaAsset  @relation("MediaAssetToTranscodeJob", fields: [inputAssetId], references: [id], onDelete: Cascade)

  @@index([businessId, reviewId], name: "ix_transcode_jobs_business_id_review_id")
  @@index([businessId])
}